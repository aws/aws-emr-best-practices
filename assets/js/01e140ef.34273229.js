"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9233],{682:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>o});var n=r(4848),t=r(8453);const i={sidebar_position:2,sidebar_label:"Price-Performance"},c="Price Performance",d={id:"benchmarks/price_performance",title:"Price Performance",description:'In the scope of this tutorial, "price-performance" signifies the monetary expense associated with executing a given workload while maintaining a specific degree of performance, expressed in terms of execution duration (seconds). Evaluating price-performance plays a vital role in understanding the impact of factors that are not easily quantifiable, such as deployment architectures, competitive offerings, container allocation strategies, and processing engines.',source:"@site/docs/benchmarks/price_performance.md",sourceDirName:"benchmarks",slug:"/benchmarks/price_performance",permalink:"/aws-emr-best-practices/docs/benchmarks/price_performance",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/benchmarks/price_performance.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Price-Performance"},sidebar:"benchmarks",previous:{title:"Benchmarks",permalink:"/aws-emr-best-practices/docs/benchmarks/introduction"},next:{title:"Benchmarking Variables",permalink:"/aws-emr-best-practices/docs/benchmarks/benchmarking_variables"}},a={},o=[];function l(e){const s={h1:"h1",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"price-performance",children:"Price Performance"})}),"\n",(0,n.jsx)(s.p,{children:'In the scope of this tutorial, "price-performance" signifies the monetary expense associated with executing a given workload while maintaining a specific degree of performance, expressed in terms of execution duration (seconds). Evaluating price-performance plays a vital role in understanding the impact of factors that are not easily quantifiable, such as deployment architectures, competitive offerings, container allocation strategies, and processing engines.'}),"\n",(0,n.jsx)(s.p,{children:"For variables that are within our control, such as infrastructure sizing or application settings, ensuring uniformity among all benchmarks is indispensable for accurate comparisons."}),"\n",(0,n.jsx)(s.p,{children:"The following examples highlight the importance of price-performance."}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Example 1:"})," Customer wants to compare Open Source Software (OSS) Spark vs EMR Spark with different cluster sizes"]}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{}),(0,n.jsx)(s.th,{children:"Cluster #1"}),(0,n.jsx)(s.th,{children:"Cluster #2"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Runtime (s)"}),(0,n.jsx)(s.td,{children:"12"}),(0,n.jsx)(s.td,{children:"30"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"# of nodes"}),(0,n.jsx)(s.td,{children:"50"}),(0,n.jsx)(s.td,{children:"10"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Engine"}),(0,n.jsx)(s.td,{children:"OSS Spark Runtime"}),(0,n.jsx)(s.td,{children:"EMR Spark Runtime"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Cost ($)"}),(0,n.jsx)(s.td,{children:"600"}),(0,n.jsx)(s.td,{children:"300"})]})]})]}),"\n",(0,n.jsx)(s.p,{children:"In the above example, Cluster #1 is running OSS spark and completes in 12s with 50 nodes, while EMR Spark completes in 30s with 10 nodes. However, when we look at total cost, cluster #2 total cost is lower than cluster #1 making it a better option. Comparing cost in relation to the work being done considers the difference in # of nodes and engine. Assuming performance is linear, lets look at what happens when we increase the # of nodes in cluster 2."}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Example 2:"})," Customer wants to compare Open Source Software (OSS) Spark vs EMR Spark  with same cluster sizes"]}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{}),(0,n.jsx)(s.th,{children:"Cluster #1"}),(0,n.jsx)(s.th,{children:"Cluster #2"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Runtime (s)"}),(0,n.jsx)(s.td,{children:"12"}),(0,n.jsx)(s.td,{children:"6"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"# of nodes"}),(0,n.jsx)(s.td,{children:"50"}),(0,n.jsx)(s.td,{children:"50"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Engine"}),(0,n.jsx)(s.td,{children:"OSS Spark Runtime"}),(0,n.jsx)(s.td,{children:"EMR Spark Runtime"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Cost ($)"}),(0,n.jsx)(s.td,{children:"600"}),(0,n.jsx)(s.td,{children:"300"})]})]})]}),"\n",(0,n.jsx)(s.p,{children:"After increasing the # of nodes to be the same across both clusters, runtime is reduced to 6seconds on Cluster #2 and cost remains the same at 300$. Our conclusion from the first example remains the same. Cluster #2 is the best option from a price-performance perspective."}),"\n",(0,n.jsx)(s.p,{children:"It\u2019s important to note that price-performance is not always linear. This is often seen when workloads have data skew. In these cases, adding more compute does not reduce runtime proportionally and adds costs."}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Example 3:"})," Same workload across different # of nodes - data skew"]}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{}),(0,n.jsx)(s.th,{children:"Run #1"}),(0,n.jsx)(s.th,{children:"Run #2"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Runtime (s)"}),(0,n.jsx)(s.td,{children:"100"}),(0,n.jsx)(s.td,{children:"75"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"# of nodes"}),(0,n.jsx)(s.td,{children:"10"}),(0,n.jsx)(s.td,{children:"20"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Engine"}),(0,n.jsx)(s.td,{children:"EMR Spark Runtime"}),(0,n.jsx)(s.td,{children:"EMR Spark Runtime"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Cost ($)"}),(0,n.jsx)(s.td,{children:"1000"}),(0,n.jsx)(s.td,{children:"1500"})]})]})]}),"\n",(0,n.jsx)(s.p,{children:"In the above example, performance is not linear. While runtime reduced to 75s, overall cost increased. In these cases, it\u2019s important ensure the # of nodes are the same for both comparisons."}),"\n",(0,n.jsx)(s.p,{children:"Another scenario where price-performance is useful is when comparing different pricing models or vendors. Take the example below:"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Example 4:"})," Same workload across different pricing models"]}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{}),(0,n.jsx)(s.th,{children:"EMR Spark Runtime"}),(0,n.jsx)(s.th,{children:"Vendor"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Runtime (s)"}),(0,n.jsx)(s.td,{children:"50"}),(0,n.jsx)(s.td,{children:"40"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"# of nodes"}),(0,n.jsx)(s.td,{children:"10"}),(0,n.jsx)(s.td,{children:"10"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"$/s"}),(0,n.jsx)(s.td,{children:"1"}),(0,n.jsx)(s.td,{children:"1.5"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Cost ($)"}),(0,n.jsx)(s.td,{children:"500"}),(0,n.jsx)(s.td,{children:"600"})]})]})]}),"\n",(0,n.jsx)(s.p,{children:"In the above example, the same workload on vendor runs in 40s, while EMR runs in 50s. While vendor may seem faster, when we factor in price-performance, we see total cost is lower with EMR. If runtime is a key requirement, we can increase the # of nodes in relation to performance as illustrated in example 5."}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Example 5:"})," Same workload across different pricing models with different # of nodes"]}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{}),(0,n.jsx)(s.th,{children:"EMR Spark Runtime"}),(0,n.jsx)(s.th,{children:"EMR Spark Runtime linear performance"}),(0,n.jsx)(s.th,{children:"Vendor"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Runtime (s)"}),(0,n.jsx)(s.td,{children:"50"}),(0,n.jsx)(s.td,{children:"25"}),(0,n.jsx)(s.td,{children:"40"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"# of nodes"}),(0,n.jsx)(s.td,{children:"10"}),(0,n.jsx)(s.td,{children:"20"}),(0,n.jsx)(s.td,{children:"10"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"$/s"}),(0,n.jsx)(s.td,{children:"1"}),(0,n.jsx)(s.td,{children:"1"}),(0,n.jsx)(s.td,{children:"1.5"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Cost ($)"}),(0,n.jsx)(s.td,{children:"500"}),(0,n.jsx)(s.td,{children:"500"}),(0,n.jsx)(s.td,{children:"600"})]})]})]}),"\n",(0,n.jsx)(s.p,{children:"The goal with benchmarking should always be to have like-for-like comparisons. This is especially true for factors such as application configuration settings such as executor sizes, input and output dataset, cluster size and instances. However, factors like vendor/aws pricing model, engine optimizations, and schedulers cannot be made the same. As such, it\u2019s important to use price-performance as a key factor."})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,s,r)=>{r.d(s,{R:()=>c,x:()=>d});var n=r(6540);const t={},i=n.createContext(t);function c(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);